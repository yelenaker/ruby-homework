#!/usr/bin/env ruby
# -----------------------------------------
# –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞
# –¢–µ–º–∞: –°–∫–∞–Ω–µ—Ä –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª–æ–≤—ñ–π —Å–∏—Å—Ç–µ–º—ñ
# –ú–æ–≤–∞: Ruby
# –ê–≤—Ç–æ—Ä: (–≤–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è)
# -----------------------------------------

require 'digest'   # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤ (SHA256)
require 'json'     # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
require 'find'     # –î–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π

# -----------------------------------------
# –§—É–Ω–∫—Ü—ñ—è: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–±–∏—Ä–∞—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ
# root   - –∫–æ—Ä–µ–Ω–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
# ignore - —Å–ø–∏—Å–æ–∫ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–∏—Å—Ç–µ–º–Ω—ñ)
# –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ö–µ—à—ñ–≤: { path, size, inode(optional) }
# -----------------------------------------
def collect_files(root, ignore = [])
  files = []

  Find.find(root) do |path|
    next if File.directory?(path)                   # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–∞–ø–∫–∏
    next if ignore.any? { |skip| path.include?(skip) }  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–∫–∞–∑–∞–Ω—ñ —à–ª—è—Ö–∏

    begin
      stat = File.stat(path)
      files << { path: path, size: stat.size, inode: stat.ino }
    rescue => e
      warn "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É #{path}: #{e.message}"
    end
  end

  files
end

# -----------------------------------------
# –§—É–Ω–∫—Ü—ñ—è: –≥—Ä—É–ø—É—î —Ñ–∞–π–ª–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏)
# –ü–æ–≤–µ—Ä—Ç–∞—î —Ö–µ—à { size => [—Ñ–∞–π–ª–∏] }
# -----------------------------------------
def group_by_size(files)
  files.group_by { |f| f[:size] }.select { |_, v| v.size > 1 }
end

# -----------------------------------------
# –§—É–Ω–∫—Ü—ñ—è: –æ–±—á–∏—Å–ª—é—î SHA256-—Ö–µ—à –¥–ª—è —Ñ–∞–π–ª—É
# -----------------------------------------
def file_hash(path)
  Digest::SHA256.file(path).hexdigest
rescue => e
  warn "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è #{path}: #{e.message}"
  nil
end

# -----------------------------------------
# –§—É–Ω–∫—Ü—ñ—è: –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ö–µ—à
# -----------------------------------------
def confirm_duplicates(groups_by_size)
  confirmed = []

  groups_by_size.each_value do |group|
    hash_groups = group.group_by { |f| file_hash(f[:path]) }.select { |_, v| v.size > 1 }

    hash_groups.each do |hash, files|
      size = files.first[:size]
      saved = (files.size - 1) * size
      confirmed << {
        size_bytes: size,
        saved_if_dedup_bytes: saved,
        files: files.map { |f| f[:path] }
      }
    end
  end

  confirmed
end

# -----------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
# -----------------------------------------

root_dir = ARGV[0] || '.'  # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö ‚Äì –ø–æ—Ç–æ—á–Ω–∞ –ø–∞–ø–∫–∞
ignore_list = ['.git', 'node_modules', 'tmp']

puts "üîç –°–∫–∞–Ω—É—é –∫–∞—Ç–∞–ª–æ–≥: #{root_dir} ..."
all_files = collect_files(root_dir, ignore_list)
puts "üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: #{all_files.size}"

puts "üß© –ì—Ä—É–ø—É—é –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º..."
size_groups = group_by_size(all_files)

puts "üß† –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—ñ–≤..."
duplicates = confirm_duplicates(size_groups)

# -----------------------------------------
# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç —É JSON
# -----------------------------------------
report = {
  scanned_files: all_files.size,
  groups: duplicates
}

File.open('duplicates.json', 'w') do |f|
  f.write(JSON.pretty_generate(report))
end

puts "‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ duplicates.json"
puts "üî∏ –ì—Ä—É–ø –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: #{duplicates.size}"
